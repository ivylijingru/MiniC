Terminals unused in grammar

   INPUT
   OUTPUT
   VOID
   WRITE
   STRING


State 125 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: decl_list

    2 decl_list: decl_list var_defn
    3          | decl_list func_defn
    4          | decl_list func_decl
    5          | decl_list main_func
    6          | var_defn
    7          | func_defn
    8          | func_decl
    9          | main_func

   10 $@1: %empty

   11 $@2: %empty

   12 main_func: INT MAIN LPAREN RPAREN $@1 block $@2

   13 var_defn: INT ID SEMI
   14         | INT ID LBRACK NUM RBRACK SEMI

   15 func_defn: func_header block

   16 func_decl: func_header SEMI

   17 stmt: assign_stmt
   18     | if_stmt
   19     | while_stmt
   20     | return_stmt
   21     | func_call SEMI
   22     | var_defn

   23 $@3: %empty

   24 func_header: INT ID $@3 LPAREN params RPAREN

   25 params: %empty

   26 $@4: %empty

   27 params: $@4 param_list

   28 param_list: param_list COMMA param
   29           | param

   30 param: INT ID
   31      | INT ID LBRACK RBRACK
   32      | INT ID LBRACK NUM RBRACK

   33 block: LBRACE stmt_list RBRACE
   34      | LBRACE RBRACE

   35 stmt_list: stmt_list stmt
   36          | stmt_list func_decl

   37 $@5: %empty

   38 $@6: %empty

   39 stmt_list: stmt_list $@5 block $@6
   40          | stmt
   41          | func_decl

   42 $@7: %empty

   43 $@8: %empty

   44 stmt_list: $@7 block $@8

   45 assign_stmt: lval ASSIGN arith_expr SEMI

   46 lval: ID
   47     | ID LBRACK arith_expr RBRACK

   48 rval: ID
   49     | ID LBRACK RBRACK
   50     | ID LBRACK arith_expr RBRACK

   51 if_stmt: IF LPAREN arith_expr RPAREN block_
   52        | IF LPAREN arith_expr RPAREN block_ ELSE block_

   53 $@9: %empty

   54 $@10: %empty

   55 block_: $@9 block $@10

   56 $@11: %empty

   57 $@12: %empty

   58 block_: $@11 stmt $@12

   59 while_stmt: WHILE LPAREN arith_expr RPAREN block_

   60 return_stmt: RETURN arith_expr SEMI

   61 func_call: ID LPAREN arg_list RPAREN

   62 arg_list: arg_list COMMA arith_expr
   63         | arith_expr
   64         | %empty

   65 arith_expr: LPAREN arith_expr RPAREN
   66           | rval
   67           | func_call
   68           | NUM
   69           | arith_expr PLUS arith_expr
   70           | arith_expr MINUS arith_expr
   71           | arith_expr TIMES arith_expr
   72           | arith_expr OVER arith_expr
   73           | arith_expr MOD arith_expr
   74           | arith_expr LT arith_expr
   75           | arith_expr LE arith_expr
   76           | arith_expr GT arith_expr
   77           | arith_expr GE arith_expr
   78           | arith_expr EQ arith_expr
   79           | arith_expr NEQ arith_expr
   80           | arith_expr AND arith_expr
   81           | arith_expr OR arith_expr
   82           | NEG arith_expr
   83           | MINUS arith_expr


Terminals, with rules where they appear

$end (0) 0
error (256)
ELSE (258) 52
IF (259) 51 52
INPUT (260)
INT (261) 12 13 14 24 30 31 32
OUTPUT (262)
RETURN (263) 60
VOID (264)
WHILE (265) 59
WRITE (266)
PLUS (267) 69
MINUS (268) 70 83
TIMES (269) 71
OVER (270) 72
LT (271) 74
LE (272) 75
GT (273) 76
GE (274) 77
EQ (275) 78
NEQ (276) 79
ASSIGN (277) 45
SEMI (278) 13 14 16 21 45 60
COMMA (279) 28 62
LPAREN (280) 12 24 51 52 59 61 65
RPAREN (281) 12 24 51 52 59 61 65
LBRACK (282) 14 31 32 47 49 50
RBRACK (283) 14 31 32 47 49 50
LBRACE (284) 33 34
RBRACE (285) 33 34
NUM (286) 14 32 68
ID (287) 13 14 24 30 31 32 46 47 48 49 50 61
STRING (288)
MAIN (289) 12
AND (290) 80
OR (291) 81
NEG (292) 82
MOD (293) 73


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
program (40)
    on left: 1, on right: 0
decl_list (41)
    on left: 2 3 4 5 6 7 8 9, on right: 1 2 3 4 5
main_func (42)
    on left: 12, on right: 5 9
$@1 (43)
    on left: 10, on right: 12
$@2 (44)
    on left: 11, on right: 12
var_defn (45)
    on left: 13 14, on right: 2 6 22
func_defn (46)
    on left: 15, on right: 3 7
func_decl (47)
    on left: 16, on right: 4 8 36 41
stmt (48)
    on left: 17 18 19 20 21 22, on right: 35 40 58
func_header (49)
    on left: 24, on right: 15 16
$@3 (50)
    on left: 23, on right: 24
params (51)
    on left: 25 27, on right: 24
$@4 (52)
    on left: 26, on right: 27
param_list (53)
    on left: 28 29, on right: 27 28
param (54)
    on left: 30 31 32, on right: 28 29
block (55)
    on left: 33 34, on right: 12 15 39 44 55
stmt_list (56)
    on left: 35 36 39 40 41 44, on right: 33 35 36 39
$@5 (57)
    on left: 37, on right: 39
$@6 (58)
    on left: 38, on right: 39
$@7 (59)
    on left: 42, on right: 44
$@8 (60)
    on left: 43, on right: 44
assign_stmt (61)
    on left: 45, on right: 17
lval (62)
    on left: 46 47, on right: 45
rval (63)
    on left: 48 49 50, on right: 66
if_stmt (64)
    on left: 51 52, on right: 18
block_ (65)
    on left: 55 58, on right: 51 52 59
$@9 (66)
    on left: 53, on right: 55
$@10 (67)
    on left: 54, on right: 55
$@11 (68)
    on left: 56, on right: 58
$@12 (69)
    on left: 57, on right: 58
while_stmt (70)
    on left: 59, on right: 19
return_stmt (71)
    on left: 60, on right: 20
func_call (72)
    on left: 61, on right: 21 67
arg_list (73)
    on left: 62 63 64, on right: 61 62
arith_expr (74)
    on left: 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82
    83, on right: 45 47 50 51 52 59 60 62 63 65 69 70 71 72 73 74 75
    76 77 78 79 80 81 82 83


State 0

    0 $accept: . program $end

    INT  shift, and go to state 1

    program      go to state 2
    decl_list    go to state 3
    main_func    go to state 4
    var_defn     go to state 5
    func_defn    go to state 6
    func_decl    go to state 7
    func_header  go to state 8


State 1

   12 main_func: INT . MAIN LPAREN RPAREN $@1 block $@2
   13 var_defn: INT . ID SEMI
   14         | INT . ID LBRACK NUM RBRACK SEMI
   24 func_header: INT . ID $@3 LPAREN params RPAREN

    ID    shift, and go to state 9
    MAIN  shift, and go to state 10


State 2

    0 $accept: program . $end

    $end  shift, and go to state 11


State 3

    1 program: decl_list .
    2 decl_list: decl_list . var_defn
    3          | decl_list . func_defn
    4          | decl_list . func_decl
    5          | decl_list . main_func

    INT  shift, and go to state 1

    $default  reduce using rule 1 (program)

    main_func    go to state 12
    var_defn     go to state 13
    func_defn    go to state 14
    func_decl    go to state 15
    func_header  go to state 8


State 4

    9 decl_list: main_func .

    $default  reduce using rule 9 (decl_list)


State 5

    6 decl_list: var_defn .

    $default  reduce using rule 6 (decl_list)


State 6

    7 decl_list: func_defn .

    $default  reduce using rule 7 (decl_list)


State 7

    8 decl_list: func_decl .

    $default  reduce using rule 8 (decl_list)


State 8

   15 func_defn: func_header . block
   16 func_decl: func_header . SEMI

    SEMI    shift, and go to state 16
    LBRACE  shift, and go to state 17

    block  go to state 18


State 9

   13 var_defn: INT ID . SEMI
   14         | INT ID . LBRACK NUM RBRACK SEMI
   24 func_header: INT ID . $@3 LPAREN params RPAREN

    SEMI    shift, and go to state 19
    LBRACK  shift, and go to state 20

    $default  reduce using rule 23 ($@3)

    $@3  go to state 21


State 10

   12 main_func: INT MAIN . LPAREN RPAREN $@1 block $@2

    LPAREN  shift, and go to state 22


State 11

    0 $accept: program $end .

    $default  accept


State 12

    5 decl_list: decl_list main_func .

    $default  reduce using rule 5 (decl_list)


State 13

    2 decl_list: decl_list var_defn .

    $default  reduce using rule 2 (decl_list)


State 14

    3 decl_list: decl_list func_defn .

    $default  reduce using rule 3 (decl_list)


State 15

    4 decl_list: decl_list func_decl .

    $default  reduce using rule 4 (decl_list)


State 16

   16 func_decl: func_header SEMI .

    $default  reduce using rule 16 (func_decl)


State 17

   33 block: LBRACE . stmt_list RBRACE
   34      | LBRACE . RBRACE

    IF      shift, and go to state 23
    INT     shift, and go to state 24
    RETURN  shift, and go to state 25
    WHILE   shift, and go to state 26
    RBRACE  shift, and go to state 27
    ID      shift, and go to state 28

    $default  reduce using rule 42 ($@7)

    var_defn     go to state 29
    func_decl    go to state 30
    stmt         go to state 31
    func_header  go to state 32
    stmt_list    go to state 33
    $@7          go to state 34
    assign_stmt  go to state 35
    lval         go to state 36
    if_stmt      go to state 37
    while_stmt   go to state 38
    return_stmt  go to state 39
    func_call    go to state 40


State 18

   15 func_defn: func_header block .

    $default  reduce using rule 15 (func_defn)


State 19

   13 var_defn: INT ID SEMI .

    $default  reduce using rule 13 (var_defn)


State 20

   14 var_defn: INT ID LBRACK . NUM RBRACK SEMI

    NUM  shift, and go to state 41


State 21

   24 func_header: INT ID $@3 . LPAREN params RPAREN

    LPAREN  shift, and go to state 42


State 22

   12 main_func: INT MAIN LPAREN . RPAREN $@1 block $@2

    RPAREN  shift, and go to state 43


State 23

   51 if_stmt: IF . LPAREN arith_expr RPAREN block_
   52        | IF . LPAREN arith_expr RPAREN block_ ELSE block_

    LPAREN  shift, and go to state 44


State 24

   13 var_defn: INT . ID SEMI
   14         | INT . ID LBRACK NUM RBRACK SEMI
   24 func_header: INT . ID $@3 LPAREN params RPAREN

    ID  shift, and go to state 9


State 25

   60 return_stmt: RETURN . arith_expr SEMI

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 52


State 26

   59 while_stmt: WHILE . LPAREN arith_expr RPAREN block_

    LPAREN  shift, and go to state 53


State 27

   34 block: LBRACE RBRACE .

    $default  reduce using rule 34 (block)


State 28

   46 lval: ID .
   47     | ID . LBRACK arith_expr RBRACK
   61 func_call: ID . LPAREN arg_list RPAREN

    LPAREN  shift, and go to state 54
    LBRACK  shift, and go to state 55

    $default  reduce using rule 46 (lval)


State 29

   22 stmt: var_defn .

    $default  reduce using rule 22 (stmt)


State 30

   41 stmt_list: func_decl .

    $default  reduce using rule 41 (stmt_list)


State 31

   40 stmt_list: stmt .

    $default  reduce using rule 40 (stmt_list)


State 32

   16 func_decl: func_header . SEMI

    SEMI  shift, and go to state 16


State 33

   33 block: LBRACE stmt_list . RBRACE
   35 stmt_list: stmt_list . stmt
   36          | stmt_list . func_decl
   39          | stmt_list . $@5 block $@6

    IF      shift, and go to state 23
    INT     shift, and go to state 24
    RETURN  shift, and go to state 25
    WHILE   shift, and go to state 26
    RBRACE  shift, and go to state 56
    ID      shift, and go to state 28

    $default  reduce using rule 37 ($@5)

    var_defn     go to state 29
    func_decl    go to state 57
    stmt         go to state 58
    func_header  go to state 32
    $@5          go to state 59
    assign_stmt  go to state 35
    lval         go to state 36
    if_stmt      go to state 37
    while_stmt   go to state 38
    return_stmt  go to state 39
    func_call    go to state 40


State 34

   44 stmt_list: $@7 . block $@8

    LBRACE  shift, and go to state 17

    block  go to state 60


State 35

   17 stmt: assign_stmt .

    $default  reduce using rule 17 (stmt)


State 36

   45 assign_stmt: lval . ASSIGN arith_expr SEMI

    ASSIGN  shift, and go to state 61


State 37

   18 stmt: if_stmt .

    $default  reduce using rule 18 (stmt)


State 38

   19 stmt: while_stmt .

    $default  reduce using rule 19 (stmt)


State 39

   20 stmt: return_stmt .

    $default  reduce using rule 20 (stmt)


State 40

   21 stmt: func_call . SEMI

    SEMI  shift, and go to state 62


State 41

   14 var_defn: INT ID LBRACK NUM . RBRACK SEMI

    RBRACK  shift, and go to state 63


State 42

   24 func_header: INT ID $@3 LPAREN . params RPAREN

    INT       reduce using rule 26 ($@4)
    $default  reduce using rule 25 (params)

    params  go to state 64
    $@4     go to state 65


State 43

   12 main_func: INT MAIN LPAREN RPAREN . $@1 block $@2

    $default  reduce using rule 10 ($@1)

    $@1  go to state 66


State 44

   51 if_stmt: IF LPAREN . arith_expr RPAREN block_
   52        | IF LPAREN . arith_expr RPAREN block_ ELSE block_

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 67


State 45

   83 arith_expr: MINUS . arith_expr

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 68


State 46

   65 arith_expr: LPAREN . arith_expr RPAREN

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 69


State 47

   68 arith_expr: NUM .

    $default  reduce using rule 68 (arith_expr)


State 48

   48 rval: ID .
   49     | ID . LBRACK RBRACK
   50     | ID . LBRACK arith_expr RBRACK
   61 func_call: ID . LPAREN arg_list RPAREN

    LPAREN  shift, and go to state 54
    LBRACK  shift, and go to state 70

    $default  reduce using rule 48 (rval)


State 49

   82 arith_expr: NEG . arith_expr

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 71


State 50

   66 arith_expr: rval .

    $default  reduce using rule 66 (arith_expr)


State 51

   67 arith_expr: func_call .

    $default  reduce using rule 67 (arith_expr)


State 52

   60 return_stmt: RETURN arith_expr . SEMI
   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    TIMES  shift, and go to state 74
    OVER   shift, and go to state 75
    LT     shift, and go to state 76
    LE     shift, and go to state 77
    GT     shift, and go to state 78
    GE     shift, and go to state 79
    EQ     shift, and go to state 80
    NEQ    shift, and go to state 81
    SEMI   shift, and go to state 82
    AND    shift, and go to state 83
    OR     shift, and go to state 84
    MOD    shift, and go to state 85


State 53

   59 while_stmt: WHILE LPAREN . arith_expr RPAREN block_

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 86


State 54

   61 func_call: ID LPAREN . arg_list RPAREN

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    $default  reduce using rule 64 (arg_list)

    rval        go to state 50
    func_call   go to state 51
    arg_list    go to state 87
    arith_expr  go to state 88


State 55

   47 lval: ID LBRACK . arith_expr RBRACK

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 89


State 56

   33 block: LBRACE stmt_list RBRACE .

    $default  reduce using rule 33 (block)


State 57

   36 stmt_list: stmt_list func_decl .

    $default  reduce using rule 36 (stmt_list)


State 58

   35 stmt_list: stmt_list stmt .

    $default  reduce using rule 35 (stmt_list)


State 59

   39 stmt_list: stmt_list $@5 . block $@6

    LBRACE  shift, and go to state 17

    block  go to state 90


State 60

   44 stmt_list: $@7 block . $@8

    $default  reduce using rule 43 ($@8)

    $@8  go to state 91


State 61

   45 assign_stmt: lval ASSIGN . arith_expr SEMI

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 92


State 62

   21 stmt: func_call SEMI .

    $default  reduce using rule 21 (stmt)


State 63

   14 var_defn: INT ID LBRACK NUM RBRACK . SEMI

    SEMI  shift, and go to state 93


State 64

   24 func_header: INT ID $@3 LPAREN params . RPAREN

    RPAREN  shift, and go to state 94


State 65

   27 params: $@4 . param_list

    INT  shift, and go to state 95

    param_list  go to state 96
    param       go to state 97


State 66

   12 main_func: INT MAIN LPAREN RPAREN $@1 . block $@2

    LBRACE  shift, and go to state 17

    block  go to state 98


State 67

   51 if_stmt: IF LPAREN arith_expr . RPAREN block_
   52        | IF LPAREN arith_expr . RPAREN block_ ELSE block_
   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    PLUS    shift, and go to state 72
    MINUS   shift, and go to state 73
    TIMES   shift, and go to state 74
    OVER    shift, and go to state 75
    LT      shift, and go to state 76
    LE      shift, and go to state 77
    GT      shift, and go to state 78
    GE      shift, and go to state 79
    EQ      shift, and go to state 80
    NEQ     shift, and go to state 81
    RPAREN  shift, and go to state 99
    AND     shift, and go to state 83
    OR      shift, and go to state 84
    MOD     shift, and go to state 85


State 68

   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr
   83           | MINUS arith_expr .

    TIMES  shift, and go to state 74
    OVER   shift, and go to state 75
    MOD    shift, and go to state 85

    $default  reduce using rule 83 (arith_expr)


State 69

   65 arith_expr: LPAREN arith_expr . RPAREN
   69           | arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    PLUS    shift, and go to state 72
    MINUS   shift, and go to state 73
    TIMES   shift, and go to state 74
    OVER    shift, and go to state 75
    LT      shift, and go to state 76
    LE      shift, and go to state 77
    GT      shift, and go to state 78
    GE      shift, and go to state 79
    EQ      shift, and go to state 80
    NEQ     shift, and go to state 81
    RPAREN  shift, and go to state 100
    AND     shift, and go to state 83
    OR      shift, and go to state 84
    MOD     shift, and go to state 85


State 70

   49 rval: ID LBRACK . RBRACK
   50     | ID LBRACK . arith_expr RBRACK

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    RBRACK  shift, and go to state 101
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 102


State 71

   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr
   82           | NEG arith_expr .

    $default  reduce using rule 82 (arith_expr)


State 72

   69 arith_expr: arith_expr PLUS . arith_expr

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 103


State 73

   70 arith_expr: arith_expr MINUS . arith_expr

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 104


State 74

   71 arith_expr: arith_expr TIMES . arith_expr

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 105


State 75

   72 arith_expr: arith_expr OVER . arith_expr

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 106


State 76

   74 arith_expr: arith_expr LT . arith_expr

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 107


State 77

   75 arith_expr: arith_expr LE . arith_expr

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 108


State 78

   76 arith_expr: arith_expr GT . arith_expr

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 109


State 79

   77 arith_expr: arith_expr GE . arith_expr

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 110


State 80

   78 arith_expr: arith_expr EQ . arith_expr

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 111


State 81

   79 arith_expr: arith_expr NEQ . arith_expr

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 112


State 82

   60 return_stmt: RETURN arith_expr SEMI .

    $default  reduce using rule 60 (return_stmt)


State 83

   80 arith_expr: arith_expr AND . arith_expr

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 113


State 84

   81 arith_expr: arith_expr OR . arith_expr

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 114


State 85

   73 arith_expr: arith_expr MOD . arith_expr

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 115


State 86

   59 while_stmt: WHILE LPAREN arith_expr . RPAREN block_
   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    PLUS    shift, and go to state 72
    MINUS   shift, and go to state 73
    TIMES   shift, and go to state 74
    OVER    shift, and go to state 75
    LT      shift, and go to state 76
    LE      shift, and go to state 77
    GT      shift, and go to state 78
    GE      shift, and go to state 79
    EQ      shift, and go to state 80
    NEQ     shift, and go to state 81
    RPAREN  shift, and go to state 116
    AND     shift, and go to state 83
    OR      shift, and go to state 84
    MOD     shift, and go to state 85


State 87

   61 func_call: ID LPAREN arg_list . RPAREN
   62 arg_list: arg_list . COMMA arith_expr

    COMMA   shift, and go to state 117
    RPAREN  shift, and go to state 118


State 88

   63 arg_list: arith_expr .
   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    TIMES  shift, and go to state 74
    OVER   shift, and go to state 75
    LT     shift, and go to state 76
    LE     shift, and go to state 77
    GT     shift, and go to state 78
    GE     shift, and go to state 79
    EQ     shift, and go to state 80
    NEQ    shift, and go to state 81
    AND    shift, and go to state 83
    OR     shift, and go to state 84
    MOD    shift, and go to state 85

    $default  reduce using rule 63 (arg_list)


State 89

   47 lval: ID LBRACK arith_expr . RBRACK
   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    PLUS    shift, and go to state 72
    MINUS   shift, and go to state 73
    TIMES   shift, and go to state 74
    OVER    shift, and go to state 75
    LT      shift, and go to state 76
    LE      shift, and go to state 77
    GT      shift, and go to state 78
    GE      shift, and go to state 79
    EQ      shift, and go to state 80
    NEQ     shift, and go to state 81
    RBRACK  shift, and go to state 119
    AND     shift, and go to state 83
    OR      shift, and go to state 84
    MOD     shift, and go to state 85


State 90

   39 stmt_list: stmt_list $@5 block . $@6

    $default  reduce using rule 38 ($@6)

    $@6  go to state 120


State 91

   44 stmt_list: $@7 block $@8 .

    $default  reduce using rule 44 (stmt_list)


State 92

   45 assign_stmt: lval ASSIGN arith_expr . SEMI
   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    TIMES  shift, and go to state 74
    OVER   shift, and go to state 75
    LT     shift, and go to state 76
    LE     shift, and go to state 77
    GT     shift, and go to state 78
    GE     shift, and go to state 79
    EQ     shift, and go to state 80
    NEQ    shift, and go to state 81
    SEMI   shift, and go to state 121
    AND    shift, and go to state 83
    OR     shift, and go to state 84
    MOD    shift, and go to state 85


State 93

   14 var_defn: INT ID LBRACK NUM RBRACK SEMI .

    $default  reduce using rule 14 (var_defn)


State 94

   24 func_header: INT ID $@3 LPAREN params RPAREN .

    $default  reduce using rule 24 (func_header)


State 95

   30 param: INT . ID
   31      | INT . ID LBRACK RBRACK
   32      | INT . ID LBRACK NUM RBRACK

    ID  shift, and go to state 122


State 96

   27 params: $@4 param_list .
   28 param_list: param_list . COMMA param

    COMMA  shift, and go to state 123

    $default  reduce using rule 27 (params)


State 97

   29 param_list: param .

    $default  reduce using rule 29 (param_list)


State 98

   12 main_func: INT MAIN LPAREN RPAREN $@1 block . $@2

    $default  reduce using rule 11 ($@2)

    $@2  go to state 124


State 99

   51 if_stmt: IF LPAREN arith_expr RPAREN . block_
   52        | IF LPAREN arith_expr RPAREN . block_ ELSE block_

    LBRACE    reduce using rule 53 ($@9)
    $default  reduce using rule 56 ($@11)

    block_  go to state 125
    $@9     go to state 126
    $@11    go to state 127


State 100

   65 arith_expr: LPAREN arith_expr RPAREN .

    $default  reduce using rule 65 (arith_expr)


State 101

   49 rval: ID LBRACK RBRACK .

    $default  reduce using rule 49 (rval)


State 102

   50 rval: ID LBRACK arith_expr . RBRACK
   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    PLUS    shift, and go to state 72
    MINUS   shift, and go to state 73
    TIMES   shift, and go to state 74
    OVER    shift, and go to state 75
    LT      shift, and go to state 76
    LE      shift, and go to state 77
    GT      shift, and go to state 78
    GE      shift, and go to state 79
    EQ      shift, and go to state 80
    NEQ     shift, and go to state 81
    RBRACK  shift, and go to state 128
    AND     shift, and go to state 83
    OR      shift, and go to state 84
    MOD     shift, and go to state 85


State 103

   69 arith_expr: arith_expr . PLUS arith_expr
   69           | arith_expr PLUS arith_expr .
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    TIMES  shift, and go to state 74
    OVER   shift, and go to state 75
    MOD    shift, and go to state 85

    $default  reduce using rule 69 (arith_expr)


State 104

   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   70           | arith_expr MINUS arith_expr .
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    TIMES  shift, and go to state 74
    OVER   shift, and go to state 75
    MOD    shift, and go to state 85

    $default  reduce using rule 70 (arith_expr)


State 105

   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   71           | arith_expr TIMES arith_expr .
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    $default  reduce using rule 71 (arith_expr)


State 106

   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   72           | arith_expr OVER arith_expr .
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    $default  reduce using rule 72 (arith_expr)


State 107

   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   74           | arith_expr LT arith_expr .
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    TIMES  shift, and go to state 74
    OVER   shift, and go to state 75
    MOD    shift, and go to state 85

    $default  reduce using rule 74 (arith_expr)


State 108

   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   75           | arith_expr LE arith_expr .
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    TIMES  shift, and go to state 74
    OVER   shift, and go to state 75
    MOD    shift, and go to state 85

    $default  reduce using rule 75 (arith_expr)


State 109

   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   76           | arith_expr GT arith_expr .
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    TIMES  shift, and go to state 74
    OVER   shift, and go to state 75
    MOD    shift, and go to state 85

    $default  reduce using rule 76 (arith_expr)


State 110

   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   77           | arith_expr GE arith_expr .
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    TIMES  shift, and go to state 74
    OVER   shift, and go to state 75
    MOD    shift, and go to state 85

    $default  reduce using rule 77 (arith_expr)


State 111

   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   78           | arith_expr EQ arith_expr .
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    TIMES  shift, and go to state 74
    OVER   shift, and go to state 75
    LT     shift, and go to state 76
    LE     shift, and go to state 77
    GT     shift, and go to state 78
    GE     shift, and go to state 79
    MOD    shift, and go to state 85

    $default  reduce using rule 78 (arith_expr)


State 112

   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   79           | arith_expr NEQ arith_expr .
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    TIMES  shift, and go to state 74
    OVER   shift, and go to state 75
    LT     shift, and go to state 76
    LE     shift, and go to state 77
    GT     shift, and go to state 78
    GE     shift, and go to state 79
    MOD    shift, and go to state 85

    $default  reduce using rule 79 (arith_expr)


State 113

   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   80           | arith_expr AND arith_expr .
   81           | arith_expr . OR arith_expr

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    TIMES  shift, and go to state 74
    OVER   shift, and go to state 75
    LT     shift, and go to state 76
    LE     shift, and go to state 77
    GT     shift, and go to state 78
    GE     shift, and go to state 79
    EQ     shift, and go to state 80
    NEQ    shift, and go to state 81
    MOD    shift, and go to state 85

    $default  reduce using rule 80 (arith_expr)


State 114

   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr
   81           | arith_expr OR arith_expr .

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    TIMES  shift, and go to state 74
    OVER   shift, and go to state 75
    LT     shift, and go to state 76
    LE     shift, and go to state 77
    GT     shift, and go to state 78
    GE     shift, and go to state 79
    EQ     shift, and go to state 80
    NEQ    shift, and go to state 81
    AND    shift, and go to state 83
    MOD    shift, and go to state 85

    $default  reduce using rule 81 (arith_expr)


State 115

   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   73           | arith_expr MOD arith_expr .
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    $default  reduce using rule 73 (arith_expr)


State 116

   59 while_stmt: WHILE LPAREN arith_expr RPAREN . block_

    LBRACE    reduce using rule 53 ($@9)
    $default  reduce using rule 56 ($@11)

    block_  go to state 129
    $@9     go to state 126
    $@11    go to state 127


State 117

   62 arg_list: arg_list COMMA . arith_expr

    MINUS   shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 47
    ID      shift, and go to state 48
    NEG     shift, and go to state 49

    rval        go to state 50
    func_call   go to state 51
    arith_expr  go to state 130


State 118

   61 func_call: ID LPAREN arg_list RPAREN .

    $default  reduce using rule 61 (func_call)


State 119

   47 lval: ID LBRACK arith_expr RBRACK .

    $default  reduce using rule 47 (lval)


State 120

   39 stmt_list: stmt_list $@5 block $@6 .

    $default  reduce using rule 39 (stmt_list)


State 121

   45 assign_stmt: lval ASSIGN arith_expr SEMI .

    $default  reduce using rule 45 (assign_stmt)


State 122

   30 param: INT ID .
   31      | INT ID . LBRACK RBRACK
   32      | INT ID . LBRACK NUM RBRACK

    LBRACK  shift, and go to state 131

    $default  reduce using rule 30 (param)


State 123

   28 param_list: param_list COMMA . param

    INT  shift, and go to state 95

    param  go to state 132


State 124

   12 main_func: INT MAIN LPAREN RPAREN $@1 block $@2 .

    $default  reduce using rule 12 (main_func)


State 125

   51 if_stmt: IF LPAREN arith_expr RPAREN block_ .
   52        | IF LPAREN arith_expr RPAREN block_ . ELSE block_

    ELSE  shift, and go to state 133

    ELSE      [reduce using rule 51 (if_stmt)]
    $default  reduce using rule 51 (if_stmt)


State 126

   55 block_: $@9 . block $@10

    LBRACE  shift, and go to state 17

    block  go to state 134


State 127

   58 block_: $@11 . stmt $@12

    IF      shift, and go to state 23
    INT     shift, and go to state 135
    RETURN  shift, and go to state 25
    WHILE   shift, and go to state 26
    ID      shift, and go to state 28

    var_defn     go to state 29
    stmt         go to state 136
    assign_stmt  go to state 35
    lval         go to state 36
    if_stmt      go to state 37
    while_stmt   go to state 38
    return_stmt  go to state 39
    func_call    go to state 40


State 128

   50 rval: ID LBRACK arith_expr RBRACK .

    $default  reduce using rule 50 (rval)


State 129

   59 while_stmt: WHILE LPAREN arith_expr RPAREN block_ .

    $default  reduce using rule 59 (while_stmt)


State 130

   62 arg_list: arg_list COMMA arith_expr .
   69 arith_expr: arith_expr . PLUS arith_expr
   70           | arith_expr . MINUS arith_expr
   71           | arith_expr . TIMES arith_expr
   72           | arith_expr . OVER arith_expr
   73           | arith_expr . MOD arith_expr
   74           | arith_expr . LT arith_expr
   75           | arith_expr . LE arith_expr
   76           | arith_expr . GT arith_expr
   77           | arith_expr . GE arith_expr
   78           | arith_expr . EQ arith_expr
   79           | arith_expr . NEQ arith_expr
   80           | arith_expr . AND arith_expr
   81           | arith_expr . OR arith_expr

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    TIMES  shift, and go to state 74
    OVER   shift, and go to state 75
    LT     shift, and go to state 76
    LE     shift, and go to state 77
    GT     shift, and go to state 78
    GE     shift, and go to state 79
    EQ     shift, and go to state 80
    NEQ    shift, and go to state 81
    AND    shift, and go to state 83
    OR     shift, and go to state 84
    MOD    shift, and go to state 85

    $default  reduce using rule 62 (arg_list)


State 131

   31 param: INT ID LBRACK . RBRACK
   32      | INT ID LBRACK . NUM RBRACK

    RBRACK  shift, and go to state 137
    NUM     shift, and go to state 138


State 132

   28 param_list: param_list COMMA param .

    $default  reduce using rule 28 (param_list)


State 133

   52 if_stmt: IF LPAREN arith_expr RPAREN block_ ELSE . block_

    LBRACE    reduce using rule 53 ($@9)
    $default  reduce using rule 56 ($@11)

    block_  go to state 139
    $@9     go to state 126
    $@11    go to state 127


State 134

   55 block_: $@9 block . $@10

    $default  reduce using rule 54 ($@10)

    $@10  go to state 140


State 135

   13 var_defn: INT . ID SEMI
   14         | INT . ID LBRACK NUM RBRACK SEMI

    ID  shift, and go to state 141


State 136

   58 block_: $@11 stmt . $@12

    $default  reduce using rule 57 ($@12)

    $@12  go to state 142


State 137

   31 param: INT ID LBRACK RBRACK .

    $default  reduce using rule 31 (param)


State 138

   32 param: INT ID LBRACK NUM . RBRACK

    RBRACK  shift, and go to state 143


State 139

   52 if_stmt: IF LPAREN arith_expr RPAREN block_ ELSE block_ .

    $default  reduce using rule 52 (if_stmt)


State 140

   55 block_: $@9 block $@10 .

    $default  reduce using rule 55 (block_)


State 141

   13 var_defn: INT ID . SEMI
   14         | INT ID . LBRACK NUM RBRACK SEMI

    SEMI    shift, and go to state 19
    LBRACK  shift, and go to state 20


State 142

   58 block_: $@11 stmt $@12 .

    $default  reduce using rule 58 (block_)


State 143

   32 param: INT ID LBRACK NUM RBRACK .

    $default  reduce using rule 32 (param)
